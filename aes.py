import numpy as np
import math

################
# Main Program #
################



#####################
# Finite Arithmetic #
#####################

# Finite field addition
def ff_add(a, b):
  return a ^ b

# Shifts input left, and mods with 0x11B if the high bit was set, returns result
def xtime(x):
  x = x << 1
  x_str = "{0:08b}".format(x)

  if (len(x_str) > 8 and x_str[0] == "1"):
    x = ff_add(x, 0x11B)

  return x

# Finite field multiplication
def ff_mult(a, b):
  # Initialize dictionary keyed by bit position, value is the binary value
  byte_dict = { 0: a }

  # Populate dictionary, multiplying all the numbers by the previous entry into the dicitonary
  curr_byte = a
  for x in range(1,8):
    curr_byte = xtime(curr_byte)
    byte_dict[x] = curr_byte

  # Get string representation of b, iterate through and XOR items from dicitionary for bits that are set
  res = None
  byte_str = "{0:08b}".format(b)
  for y in range(len(byte_str)):
    if byte_str[(7-y)] == "1":
      if (res != None):
        res = ff_add(res, byte_dict[y])
      else:
        res = byte_dict[y]

  if res == None:
    res = 0x00
  return res

# Helper function to split a hex byte into two 4-bit decimals
def splitByte(b): 
   return [b & 15,(b >> 4) & 15]

# Helper function to convert a list of hex bytes into an int
def list2word(list):
  return int(''.join(hex(x)[2:].zfill(2) for x in list), 16)

# Helper function to convert a hex byte word into a list of bytes
def word2list(word):
  word_str = str(hex(word))[2:].zfill(8)
  return [int(word_str[0:2],16), int(word_str[2:4],16), int(word_str[4:6],16), int(word_str[6:8],16)]

def displayHexList(list):
  return ''.join(['{:02X}'.format(c) for c in list]).lower()

def log(round, function, state):
  print("round[{}].{}   {}".format(str(round).rjust(2), function, displayHexList(state)))

#################
# Key Expansion #
#################

def keyExpansion(key, Nk, Nr):
  Nb = 4
  i = 0
  w = []
  while (i < Nk):
    w.append(list2word([key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]])) 
    i += 1

  i = Nk

  while (i < Nb * (Nr + 1)):
    temp = w[i-1]
    if (i % Nk == 0):
      temp = list2word(subWord(rotWord(word2list(temp)))) ^ Rcon[math.floor(i/Nk)]
    elif (Nk > 6 and i % Nk == 4):
      temp = list2word(subWord(word2list(temp)))
    
    w.append(w[i-Nk] ^ temp)
    i = i + 1

  return np.array([word2list(x) for x in w]).flatten()

def subWord(word):
  res = []
  for x in word:
    tup = splitByte(x)
    res.append(Sbox[tup[1],tup[0]])

  return res

def rotWord(list):
  return [list[1], list[2], list[3], list[0]]

##########
# Cipher #
##########

def cipher(inpt, key):
  print("CIPHER (ENCRYPT) :")

  Nb = 4
  Nk = None
  Nr = None
  key_size = len(key) * 8
  if key_size == 128:
    Nk = 4
    Nr = 10
  elif key_size == 192:
    Nk = 6
    Nr = 12
  elif key_size == 256:
    Nk = 8
    Nr = 14
  else:
    return

  log(0, 'input', inpt)

  w = keyExpansion(key, Nk, Nr)
  state = inpt
  addRoundKey(state, w[0:Nb**2])
  log(0, 'k_sch', w[0:Nb**2])
  
  for i in range(1, Nr):
    log(i, 'start', state)
    subBytes(state)
    log(i, 's_box', state)
    shiftRows(state)
    log(i, 's_row', state)
    mixColumns(state)
    log(i, 'm_col', state)
    addRoundKey(state, w[i*Nb**2:(i+1)*Nb**2])
    log(i, 'k_sch', w[i*Nb**2:(i+1)*Nb**2])

  log(Nr, 'start', state)
  subBytes(state)
  log(Nr, 's_box', state)
  shiftRows(state)
  log(Nr, 's_row', state)
  addRoundKey(state, w[Nr*Nb**2:(Nr+1)*Nb**2])
  log(Nr, 'k_sch', w[Nr*Nb**2:(Nr+1)*Nb**2])

  log(Nr, 'outpt', state)

def subBytes(state):
  for i in range(len(state)):
    tup = splitByte(state[i])
    state[i] = Sbox[tup[1],tup[0]]

def shiftRows(state):
  for i in range(4):
    temp = [state[i], state[i+4], state[i+8], state[i+12]]
    temp = temp[i:] + temp[:i]
    [state[i], state[i+4], state[i+8], state[i+12]] = temp 

def mixColumns(state):
  x = 0
  while x < len(state):
    temp = []
    temp.append((ff_mult(0x02, state[x])) ^ (ff_mult(0x03, state[x+1])) ^ state[x+2] ^ state[x+3])
    temp.append(state[x] ^ (ff_mult(0x02, state[x+1])) ^ (ff_mult(0x03, state[x+2])) ^ state[x+3])
    temp.append(state[x] ^ state[x+1] ^ (ff_mult(0x02, state[x+2])) ^ (ff_mult(0x03, state[x+3])))
    temp.append((ff_mult(0x03, state[x])) ^ state[x+1] ^ state[x+2] ^ (ff_mult(0x02, state[x+3])))
    state[x:x+4] = temp
    x += 4

def addRoundKey(state, key):
  for i in range(len(state)):
    state[i] = state[i] ^ key[i]

##################
# INVERSE CIPHER #
##################

def invCipher(inpt, key):
  print("\nINVERSE CIPHER (DECRYPT) :")

  Nb = 4
  Nk = None
  Nr = None
  key_size = len(key) * 8
  if key_size == 128:
    Nk = 4
    Nr = 10
  elif key_size == 192:
    Nk = 6
    Nr = 12
  elif key_size == 256:
    Nk = 8
    Nr = 14
  else:
    return

  log(0, 'iinput', inpt)

  w = keyExpansion(key, Nk, Nr)
  state = inpt
  addRoundKey(state, w[Nr*Nb**2:(Nr+1)*Nb**2])
  log(0, 'ik_sch', w[Nr*Nb**2:(Nr+1)*Nb**2])
  
  for i in reversed(range(1, Nr)):
    log(Nr-i, 'istart', state)
    invShiftRows(state)
    log(Nr-i, 'is_row', state)
    invSubBytes(state)
    log(Nr-i, 'is_box', state)
    addRoundKey(state, w[i*Nb**2:(i+1)*Nb**2])
    log(Nr-i, 'ik_sch', w[i*Nb**2:(i+1)*Nb**2])
    invMixColumns(state)
    log(Nr-i, 'im_col', state)


  log(Nr, 'istart', state)
  invShiftRows(state)
  log(Nr, 'is_row', state)
  invSubBytes(state)
  log(Nr, 'is_box', state)
  addRoundKey(state, w[0:Nb**2])
  log(Nr, 'ik_sch', w[0:Nb**2])

  log(Nr, 'ioutpt', state)

def invSubBytes(state):
	for i in range(len(state)):
		tup = splitByte(state[i])
		state[i] = InvSbox[tup[1],tup[0]]

def invShiftRows(state):
  for i in range(4):
    temp = [state[i], state[i+4], state[i+8], state[i+12]]
    temp = temp[-i:] + temp[:-i]
    [state[i], state[i+4], state[i+8], state[i+12]] = temp 

def invMixColumns(state):
  x = 0
  while x < len(state):
    temp = []
    temp.append(ff_mult(0x0e, state[x]) ^ ff_mult(0x0b, state[x+1]) ^ ff_mult(0x0d, state[x+2]) ^ ff_mult(0x09, state[x+3]))
    temp.append(ff_mult(0x09, state[x]) ^ ff_mult(0x0e, state[x+1]) ^ ff_mult(0x0b, state[x+2]) ^ ff_mult(0x0d, state[x+3]))
    temp.append(ff_mult(0x0d, state[x]) ^ ff_mult(0x09, state[x+1]) ^ ff_mult(0x0e, state[x+2]) ^ ff_mult(0x0b, state[x+3]))
    temp.append(ff_mult(0x0b, state[x]) ^ ff_mult(0x0d, state[x+1]) ^ ff_mult(0x09, state[x+2]) ^ ff_mult(0x0e, state[x+3]))
    state[x:x+4] = temp
    x += 4

##################
# Helpful Arrays #
##################

Rcon = np.array([ 
  0x00000000, 0x01000000, 0x02000000, 0x04000000, 
  0x08000000, 0x10000000, 0x20000000, 0x40000000, 
  0x80000000, 0x1B000000, 0x36000000, 0x6C000000, 
  0xD8000000, 0xAB000000, 0x4D000000, 0x9A000000, 
  0x2F000000, 0x5E000000, 0xBC000000, 0x63000000, 
  0xC6000000, 0x97000000, 0x35000000, 0x6A000000, 
  0xD4000000, 0xB3000000, 0x7D000000, 0xFA000000, 
  0xEF000000, 0xC5000000, 0x91000000, 0x39000000, 
  0x72000000, 0xE4000000, 0xD3000000, 0xBD000000, 
  0x61000000, 0xC2000000, 0x9F000000, 0x25000000, 
  0x4A000000, 0x94000000, 0x33000000, 0x66000000, 
  0xCC000000, 0x83000000, 0x1D000000, 0x3A000000, 
  0x74000000, 0xE8000000, 0xCB000000, 0x8D000000
])

Sbox = np.array([
  [ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 ],
  [ 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 ],
  [ 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 ],
  [ 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 ],
  [ 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 ],
  [ 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf ],
  [ 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 ],
  [ 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 ],
  [ 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 ],
  [ 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb ],
  [ 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 ],
  [ 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 ],
  [ 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a ],
  [ 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e ],
  [ 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf ],
  [ 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ]
])

InvSbox = np.array([
  [ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb ],
  [ 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb ],
  [ 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e ],
  [ 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 ],
  [ 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92 ],
  [ 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 ],
  [ 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06 ],
  [ 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b ],
  [ 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73 ],
  [ 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e ],
  [ 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b ],
  [ 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4 ],
  [ 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f ],
  [ 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef ],
  [ 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 ],
  [ 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d ]
])

###########
# TESTING #
###########

# TEST FINITE FIELD ARITHMITIC
# print(hex(ff_add(0x57,0x83)))
# print(hex(xtime(0x57)))
# print(hex(xtime(0xae)))
# print(hex(xtime(0x47)))
# print(hex(xtime(0x8e)))
# print(hex(ff_mult(0x57,0x13)))

# TEST KEY EXPANSION
# [print(hex(item)) for item in subWord([0x00, 0x10, 0x20, 0x30])]
# [print(hex(item)) for item in subWord([0x40, 0x50, 0x60, 0x70])]
# [print(hex(item)) for item in subWord([0x80, 0x90, 0xa0, 0xb0])]
# [print(hex(item)) for item in subWord([0xc0, 0xd0, 0xe0, 0xf0])]

# [print(hex(item)) for item in rotWord([0x09, 0xcf, 0x4f, 0x3c])]
# [print(hex(item)) for item in rotWord([0x2a, 0x6c, 0x76, 0x05])]

# 128-bit cipher key
# key = [ 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c ]
# [print(hex(x)) for x in keyExpansion(key)]

# 192-bit cipher key
# key = [ 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b,
#         0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b ]
# [print(hex(x)) for x in keyExpansion(key)]

# 256-bit cipher key
# key = [ 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
#         0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 ]
# print([hex(x) for x in keyExpansion(key)])
# myList = [word2list(x) for x in keyExpansion(key)]
# for i in range(len(myList)):
#   print([hex(x) for x in myList[i]])

# TEST CIPHER FUNCTIONS
# state = [0x19,0xa0,0x9a,0xe9,0x3d,0xf4,0xc6,0xf8,0xe3,0xe2,0x8d,0x48,0xbe,0x2b,0x2a,0x08]
# print([hex(x) for x in state])
# subBytes(state)
# print([hex(x) for x in state])
# shiftRows(state)
# print([hex(x) for x in state])
# mixColumns(state)
# print([hex(x) for x in state])

# TEST CIPHER
# inpt = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34]
# key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
# encrpyted = cipher(inpt, key)
#displayHexList(encrpyted)

# print("\nC.1 AES-128 (Nk=4, Nr=10)\n")
# plaintext = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]
# key = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
# cipher(plaintext, key)
# invCipher(plaintext, key)

# print("\nC.2 AES-192 (Nk=6, Nr=12)\n")
# plaintext = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]
# key = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
#         0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17]
# cipher(plaintext, key)
# invCipher(plaintext, key)

# print("\nC.3 AES-256 (Nk=8, Nr=14)\n")
# plaintext = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]
# key = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 
#         0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 
#         0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f]
# cipher(plaintext, key)
# invCipher(plaintext, key)